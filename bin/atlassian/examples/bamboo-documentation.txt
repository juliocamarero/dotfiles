{csv:output=wiki|autoNumber=true|sortColumn=1|sortIcon=true}
Action, Category, Description, Required parameters, Optional parameters, Output formats
"[#addComment] {anchor: addComment}", "Comments", "Add a comment to a build.", "[#build], [#comment]", "[#number], [#findReplace], [#findReplaceRegex], [#file], [#encoding]", 
"[#addLabels] {anchor: addLabels}", "Labels", "Add a comma separated list of labels to a build.", "[#build], [#labels]", "[#number]", 
"[#addTask] {anchor: addTask}", , "Add a task to a build plan job. Bamboo 3.3 and above.", "[#plan], [#job], [#taskKey]", "[#fields], [#field1], [#value1], [#field2], [#value2], [#field3], [#value3], [#field4], [#value4]", 
"[#clonePlan] {anchor: clonePlan}", "Plans", "Clone a build plan.", "[#plan], [#toPlan]", "[#name], [#description],", 
"[#cloneProject] {anchor: cloneProject}", "Projects", "Clone each build plan in a project to another project.", "[#project], [#toProject]", , 
"[#deletePlan] {anchor: deletePlan}", "Plans", "Delete a build plan.", "[#plan]", , 
"[#deleteProject] {anchor: deleteProject}", "Projects", "Delete project and all project plans.", "[#project]", "[#file]", 
"[#disablePlan] {anchor: disablePlan}", "Plans", "Disable a build plan from running.", "[#plan]", , 
"[#disableProject] {anchor: disableProject}", "Projects", "Disable all project plans.", "[#project]", , 
"[#enablePlan] {anchor: enablePlan}", "Plans", "Enable a build plan to run.", "[#plan]", , 
"[#enableProject] {anchor: enableProject}", "Projects", "Enable all project plans.", "[#project]", , 
"[#getArtifact] {anchor: getArtifact}", "Artifacts", "Download a copy of a build artifact into a file.", "[#build], [#artifact], [#file]", "[#number]", 
"[#getBuildList] {anchor: getBuildList}", "Lists", "Get a list of builds.", , "[#file], [#attribute], [#favourite], [#expand], [#labels], [#issues]", 
"[#getBuildQueueList] {anchor: getBuildQueueList}", "Lists", "Get a list of builds waiting in the build queue. Subset by project or build.", , "[#project], [#build], [#file]", 
"[#getBuild] {anchor: getBuild}", "Builds", "Get build result.", "[#build]", "[#number], [#expand], [#file]", 
"[#getClientInfo] {anchor: getClientInfo}", "Info", "Get information about the this client tool.", , , 
"[#getCommentList] {anchor: getCommentList}", "Lists", "Get a list of comments for a build.", "[#build]", "[#number], [#file]", 
"[#getLabelList] {anchor: getLabelList}", "Lists", "Get a list of labels for a build.", "[#build]", "[#number], [#file]", 
"[#getLatestBuildNumber] {anchor: getLatestBuildNumber}", "Builds", "Get the number of the last completed build.", "[#build]", , 
"[#getLatestBuildResults] {anchor: getLatestBuildResults}", "Builds", "Get build results for a build or project.", "[#build] or [#project]", "[#file]", 
"[#getPlanList] {anchor: getPlanList}", "Lists", "Get a list of build plans.", , "[#project], [#favourite], [#file], [#attribute], [#expand]", 
"[#getPlan] {anchor: getPlan}", "Plans", "Get build plan information.", "[#plan]", , 
"[#getProjectList] {anchor: getProjectList}", "Lists", "Get a list of projects.", , "[#file], [#attribute], [#expand]", 
"[#getProject] {anchor: getProject}", "Projects", "Get project information.", "[#project]", "[#file]", 
"[#getServerInfo] {anchor: getServerInfo}", "Info", "Get information about the Bamboo server.", , , 
"[#login] {anchor: login}", "Misc", "Login to remote server. Returns login token.", "[#password]", "[#user]", 
"[#logout] {anchor: logout}", "Misc", "Logout of remote server.", , , 
"[#queueBuild] {anchor: queueBuild}", "Builds", "Queue a build to run. Specify build key.", "[#build]", "[#wait], [#timeout], [#fields], [#field1], [#value1], [#field2], [#value2], [#field3], [#value3], [#field4], [#value4]", 
"[#removeLabels] {anchor: removeLabels}", "Labels", "Delete labels from a build. Labels can be a comma separated list or regex. Either build or search terms         (searchLabels, issues) must be provided", "[#labels]", "[#build], [#number], [#searchLabels], [#issues], [#favourite]", 
"[#removeTask] {anchor: removeTask}", , "Remove a task from a build plan job. Bamboo 3.3 and above.", "[#plan], [#job], [#id]", , 
"[#renderRequest] {anchor: renderRequest}", "Render", "Render url based request.", "[#request]", "[#requestParameters], [#build], [#file], [#encoding]", 
"[#runFromCsv] {anchor: runFromCsv}", "Run", "Run actions generated from a CSV file.", "[#file]", "[#common], [#propertyFile], [#continue], [#quiet], [#simulate], [#encoding], [#findReplace], [#findReplaceRegex]", 
"[#runFromList] {anchor: runFromList}", "Lists", "Run actions for each entry in a list. When file is provided, each action in the file augmented by the common         parameter will be run for each entry. Otherwise, just the action specified by the common parameter will be run. @entry@ will         be replaced with the entry value.", "[#list]", "[#file], [#common], [#continue], [#quiet], [#simulate], [#encoding], [#findReplace], [#findReplaceRegex]", 
"[#runFromSql] {anchor: runFromSql}", "Run", "Run actions generated.by SQL provided by the sql parameter, a file, or standard input", "[#sql] or [#file] or standard input", "[#common], [#host], [#driver], [#database], host, [#port], [#url], [#dbUser], [#dbPassword],         	 [#propertyFile], [#continue], [#simulate], [#encoding], [#findReplace], [#findReplaceRegex]", 
"[#run] {anchor: run}", "Run", "Run actions from a file or standard input.", "[#file] or standard input", "[#common], [#continue], [#simulate], [#encoding], [#findReplace], [#findReplaceRegex]", 
"[#triggerBuild] {anchor: triggerBuild}", "Builds", "Triggers a build if there are source changes.", "[#build]", , 
"[#updateTask] {anchor: updateTask}", , "Update a task in a build plan job. Bamboo 3.3 and above.", "[#plan], [#job], [#id]", "[#fields], [#field1], [#value1], [#field2], [#value2], [#field3], [#value3], [#field4], [#value4]", 
"[#verifyBuild] {anchor: verifyBuild}", "Builds", "Verify build was successful.", "[#build]", "[#number]", 
{csv}


h3. Parameters
{include:ACLI:Shared - tips for documentation}
{csv:output=wiki|autoNumber=true|sortColumn=1|sortIcon=true}
Parameter, Short, Value, Description
"action {anchor:action}", "a", "(/)", 
"api {anchor:api}", , "(/)", "API version. Some requests produce different results based on the api version used. Use 0 for latest. (default: 0)"
"artifact {anchor:artifact}", , "(/)", "Build artifact name. May be extended by a path name for locating files within an artifact representing a dirctory."
"attribute {anchor:attribute}", , "(/)", "Attribute to list."
"build {anchor:build}", , "(/)", "Build key. Optionally, for some actions, may contain build number. Example: XXX-DEF or XXX-DEF-1"
"comment {anchor:comment}", , "(/)", "Comment for an build"
"common {anchor:common}", , "(/)", "Common parameter string added to all run actions."
"continue {anchor:continue}", , "(x)", "Continue processing even after errors are encountered."
"database {anchor:database}", , "(/)", "Database name is required for SQL actions."
"dbPassword {anchor:dbPassword}", , "(/)", "Database user password. Defaults to password."
"dbUser {anchor:dbUser}", , "(/)", "Database user name. Defaults to user."
"debug {anchor:debug}", , "(x)", "Requests detail debug output. Optional for all actions."
"description {anchor:description}", , "(/)", "Build plan description."
"driver {anchor:driver}", , "(/)", "JDBC driver class or predefined value: postgresql, mysql, mssql, oracle, or db2400. Required for SQL actions."
"encoding {anchor:encoding}", , "(/)", "Character encoding (character set) for text based file content - must be an encoding supported by your JAVA platform."
"expand {anchor:expand}", , "(/)", "Expanded request information to obtain more detailed data on request."
"favourite {anchor:favourite}", , "(x)", "Subset to favourites."
"field1 {anchor:field1}", , "(/)", "Task specific field or build variable name. Complements the fields parameter. Value is specified by the value1 parameter."
"field2 {anchor:field2}", , "(/)", "Task specific field or build variable name. Complements the fields parameter. Value is specified by the value2 parameter."
"field3 {anchor:field3}", , "(/)", "Task specific field or build variable name. Complements the fields parameter. Value is specified by the value3 parameter."
"field4 {anchor:field4}", , "(/)", "Task specific field or build variable name. Complements the fields parameter. Value is specified by the value4 parameter."
"fields {anchor:fields}", , "(/)", "Use to specify task specific fields or build variables and their values. A comma separated list of key:value pairs. Single         quote the key:value pair if it contains a comma (,) or line breaks."
"file {anchor:file}", "f", "(/)", "Path to file based content or result output. Use - for standard input."
"findReplace {anchor:findReplace}", , "(/)", "Find and replace text. Comma separated list of colon separated pairs. Single quote values containing a delimiter. Embedded         quotes must be doubled."
"findReplaceRegex {anchor:findReplaceRegex}", , "(/)", "Find and replace text with a regular expression. Comma separated list of colon separated pairs. Single quote values         containing a delimiter. Embedded quotes must be doubled."
"help {anchor:help}", , "(x)", "Prints this help message."
"host {anchor:host}", , "(/)", "Database host server for SQL actions. Not used if url is provided. (default: localhost)"
"id {anchor:id}", , "(/)", "Task id."
"issues {anchor:issues}", , "(/)", "Comma separated list of JIRA issue keys."
"job {anchor:job}", , "(/)", "Job key. Example: JOB1"
"labels {anchor:labels}", , "(/)", "Comma or blank separated list of labels."
"list {anchor:list}", , "(/)", "Comma separated list of entries. Single quote values containing a delimiter. Embedded quotes must be doubled."
"login {anchor:login}", , "(/)", "Login token from previous login request."
"loginFromStandardInput {anchor:loginFromStandardInput}", "l", "(x)", "Get login token from standard input."
"name {anchor:name}", , "(/)", "Build plan name."
"number {anchor:number}", , "(/)", "Build number. Defaults to latest. (default: 0)"
"outputFormat {anchor:outputFormat}", , "(/)", "Specify output format for an action. (default: 1)"
"password {anchor:password}", "p", "(/)", "User password for remote login."
"plan {anchor:plan}", , "(/)", "Build plan key containing the project key.  Example: XXX-DEF"
"port {anchor:port}", , "(/)", "Database host port for SQL actions. Optional, defaults to database default. Not used if url is provided."
"project {anchor:project}", , "(/)", "Project key. Example: XXX"
"propertyFile {anchor:propertyFile}", , "(/)", "Property file with mapping information."
"quiet {anchor:quiet}", , "(x)", "Limit some output messages. Optional for all actions."
"request {anchor:request}", , "(/)", "URL fragment for a request."
"requestParameters {anchor:requestParameters}", , "(/)", "URL request parameters"
"searchLabels {anchor:searchLabels}", , "(/)", "Comma or blank separated list of labels used for search."
"server {anchor:server}", "s", "(/)", "Server URL."
"service {anchor:service}", , "(/)", "Service address extension. (default: /rest/api)"
"simulate {anchor:simulate}", , "(x)", "Simulate running actions. Log the action that would be taken."
"sql {anchor:sql}", , "(/)", "SQL select statement used to generate a run script."
"taskKey {anchor:taskKey}", , "(/)", "Task key. Example: com.atlassian.bamboo.plugins.scripttask:task.builder.script"
"timeout {anchor:timeout}", , "(/)", "Wait timeout in seconds. Use -1 to wait forever. (default: -1)"
"toPlan {anchor:toPlan}", , "(/)", "Build plan key to be created. Example: XXX-DEF"
"toProject {anchor:toProject}", , "(/)", "Project key to clone to."
"url {anchor:url}", , "(/)", "Action specific setting. Example: Database access url for SQL actions. Optional when host is provided."
"user {anchor:user}", "u", "(/)", "User name for remote login. (default: automation)"
"value1 {anchor:value1}", , "(/)", "Value corresponding to the field1 parameter name."
"value2 {anchor:value2}", , "(/)", "Value corresponding to the field2 parameter name."
"value3 {anchor:value3}", , "(/)", "Value corresponding to the field3 parameter name."
"value4 {anchor:value4}", , "(/)", "Value corresponding to the field4 parameter name."
"verbose {anchor:verbose}", "v", "(x)", "Requests verbose output to help with problem determination. Optional for all actions."
"wait {anchor:wait}", , "(x)", "Wait for action to complete."
{csv}

